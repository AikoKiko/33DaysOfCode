import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class stackBoxes {

	ArrayList<Box> stack = new ArrayList<Box>();
	int size = stack.size();
	int maxsize=0;
	int maxsize2=0;
	
	public stackBoxes() {
		Collections.sort(stack, new SortBox());
	}
	
	public int start () {
		ArrayList<Box> solution = new ArrayList<Box>();
		for(int i = 0; i<stack.size(); i++) {
			int max=0;
			Box bottom=stack.get(i);
			solution.add(bottom);
			max+=bottom.getH();
			int lenghth= implement(bottom,solution,max);
			maxsize2=Math.max(maxsize2, lenghth);
		}
		return maxsize2;
	}
   public int implement(Box initialPoint, ArrayList<Box> solution,int max) {
	  
	       int IP = stack.indexOf(initialPoint);
	   for(int j=IP+1; j<size; j++) {// barlyk case, i prosto podbirai iz etih i vse , ne dumai esli ne podoidet
		   Box PC= stack.get(j);
		   if(PC.canBeAbove(initialPoint)) {
			   solution.add(PC);
			   max+=PC.getH();
			   implement(PC,solution,max);
		   }
		   
	   }
	   
	   maxsize = Math.max(maxsize, max);
	   return maxsize;
   }
}






class Box {
	private int w;
	private int h;
	private int d;
	Box(int w, int h, int d) {
		this.setW(w);
		this.setH(h); 
		this.setD(d);
	}
	int getH() {
		return h;
	}
	void setH(int h) {
		this.h = h;
	}
	
	int getW() {
		return w;
	}
	void setW(int w) {
		this.w = w;
	}
	int getD() {
		return d;
	}
	void setD(int d) {
		this.d = d;
	}
	public boolean canBeAbove(Box k) {
		if(k.getH()<h && k.getD()<d && k.getW()<w) {
			return true;
		}
		return false;
	}
}

class SortBox implements Comparator<Box> {

	@Override
	public int compare(Box b1, Box b2) {
		return b2.getH()-b1.getH();
	}
	
}
